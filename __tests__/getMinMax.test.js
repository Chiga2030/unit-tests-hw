const getMinMax = require('../getMinMax');

/**
* Классы эквивалентности:
* Выделим классы позитивных сценариев, при которых ожидаем в ответ от функции объект с полями min и max:
* Класс 1: Строка - включает в себя одно или более чисел (положительное / отрицательное).
* Класс 2: Строка - включает в себя знак запятой и число (положительное / отрицательное) идущее сразу за ним.
* Класс 3: Строка - включает в себя знак запятой, пробел и число (положительное / отрицательное) идущие друг за другом.
* Класс 4: Строка - включает в себя пробел и число (положительное / отрицательное) идущее сразу за ним.
* Класс 5: Негативный сценарий, строка не содержит чисел - в ответ ожидаем оибку.
*/

// Проверяемые значения (они же одновременно и граничные значения):
describe('Проверка функции getMinMax() на граничных значениях', () => {
	test('Проверка функции на одном значении (граничное значение -Infinity), ожидаем что min и max будут одинаковые', () => {
		const value1 = '-Infinity';
		const res = { min: -Infinity, max: -Infinity };
	  expect(getMinMax(value1)).toEqual(res);
	});
	test('Проверка функции на одном значении (граничное значение +Infinity), в строку входят знак запятой и число (положительное / отрицательное) идущее сразу за ним, ожидаем что min и max будут одинаковые', () => {
		const value2 = ',Infinity';
		const res = { min: Infinity, max: Infinity };
	  expect(getMinMax(value2)).toEqual(res);
	});
	test('Проверка функции на одном значении (граничное значение -0), знак запятой, пробел и число (положительное / отрицательное) идущие друг за другом, ожидаем что min и max будут одинаковые', () => {
		const value3 = ', -0';
		const res = { min: -0, max: -0 };
	  expect(getMinMax(value3)).toEqual(res);
	});
	test('Проверка функции на одном значении (граничное значение +0), пробел и число (положительное / отрицательное) идущее сразу за ним, ожидаем что min и max будут одинаковые', () => {
		const value4 = ' 0';
		const res = { min: 0, max: 0 };
	  expect(getMinMax(value4)).toEqual(res);
	});
	test('Функция получает строку с разными значениями (текстовыми и числовыми)', () => {
		const value5 = 'текст 84 вперемешку 15 с -100 числами ,75 в 0 различных 65формах 3.14 и 8.14 расположениях';
		const res = { min: -100, max: 84 };
	  expect(getMinMax(value5)).toEqual(res);
	});
});

describe('Проверка функции getMinMax() на негативном сценарии', () => {
	test('Функция получает строку не содержащую чисел - в ответ ожидаем получить ошибку (не объект {min: , max: ,}))', () => {
		const value1 = 'просто текст без чисел';
	  expect(typeof getMinMax(value1)).not.toBe('object');
	});
});
